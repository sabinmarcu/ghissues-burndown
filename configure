#!/bin/bash

tabs=0

black='\033[0;30m'
darkgray='\033[1;30m'
blue='\033[0;34m'
lightblue='\033[1;34m'
green='\033[0;32m'
lightgreen='\033[1;32m'
cyan='\033[0;36m'
lightcyan='\033[1;36m'
red='\033[0;31m'
lightred='\033[1;31m'
purple='\033[0;35m'
lightpurple='\033[1;35m'
orange='\033[0;33m'
yellow='\033[1;33m'
lightgrey='\033[0;37m'
white='\033[1;37m'

function write_tabs {
    for i in `seq $1`; do
        echo -e "    \c"
    done
}

function nvm_detect_profile {
  if [ -f "$PROFILE" ]; then
    echo "$PROFILE"
  elif [ -f "$HOME/.bashrc" ]; then
    echo "$HOME/.bashrc"
  elif [ -f "$HOME/.bash_profile" ]; then
    echo "$HOME/.bash_profile"
  elif [ -f "$HOME/.zshrc" ]; then
    echo "$HOME/.zshrc"
  elif [ -f "$HOME/.profile" ]; then
    echo "$HOME/.profile"
  fi
}

function check_dependencies {

    function check_node_with_nvm {
        write_tabs $tabs && echo -e "Setting the default node environment with nvm."
        nvm use default &> /dev/null
        write_tabs $tabs && echo -e "Checking for ${orange}node${orange} again${white}...\c"
        if command -v node &> /dev/null; then
            echo -e "$green it is present in the system.$white"
        else
            echo -e "$red it was not found at all${white}"
            tabs=$((tabs + 1))
            write_tabs $tabs && echo -e "Attempting to install ${orange}$prog${white}"
            install_node_with_nvm
            tabs=$((tabs - 1))
        fi
    }

    function install_node {
        write_tabs $tabs && echo -e "Checking for ${orange}nvm${white}...\c"
        if command -v nvm &> /dev/null; then
            echo -e "${green} was found!$white"
        else
            if [ -d "$HOME/.nvm" ] && [ -f "$HOME/.nvm/nvm.sh" ]; then 
                echo -e "${green} was found!$white"
                . "$HOME/.nvm/nvm.sh" &> /dev/null
            else
                echo -e "${red} was not found!$white"
                tabs=$((tabs + 1))
                install_nvm
                . "$HOME/.nvm/nvm.sh" &> /dev/null
                tabs=$((tabs - 1))
            fi
        fi
        check_node_with_nvm
    }

    function install_node_with_nvm {
        write_tabs $tabs && echo -e "Installing node (${orange}v0.12.0${white})"
        nvm install v0.12.0 &> /dev/null
        nvm alias default v0.12.0 &> /dev/null
        nvm use default &> /dev/null
    }

    function install_nvm {
        write_tabs $tabs && echo -e "Checking for ${orange}Git${white}... \c"
        if command -v git &> /dev/null; then
            echo -e "${green}found.$white"
        else
            echo -e "${red}has not been found.$white"
            tabs=$((tabs + 1))
            install_git
            tabs=$((tabs - 1))
        fi
        write_tabs $tabs && echo -e "Installing NVM \c"
        if command -v curl &> /dev/null; then
            echo -e "with ${orange}CURL$white"
            curl --silent https://raw.githubusercontent.com/creationix/nvm/v0.23.3/install.sh | bash &> /dev/null
        else
            echo -e "with ${orange}WGET$white"
            wget --quiet -qO- https://raw.githubusercontent.com/creationix/nvm/v0.23.3/install.sh | bash &> /dev/null
        fi
        source $(nvm_detect_profile)
    }

    function install_git {
        write_tabs $tabs && echo -e "Checking for OS (${orange}$(uname -s)${white})..."
        if [ "$(uname -s)" = "Darwin" ]; then
            if command -v brew &> /dev/null; then
                write_tabs $tabs && echo -e "${oreange}brew${green} is installed${white}."
            else
                write_tabs $tabs && echo -e "${oreange}brew${red} is not installed${white}... Installing now."
                ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
            fi
            write_tabs $tabs && echo -e "Installing ${orange}Git${white} with ${orange}brew${white}..."
            brew install git
        else 
            if [ "$(uname -s)" = "Linux" ]; then
                if command -v apt-get; then
                    write_tabs $tabs && echo -e "${oreange}apt-get${green} is installed${white}."
                    write_tabs $tabs && echo -e "Installing ${orange}Git${white} with ${orange}apt-get${white}..."
                    apt-get install -qy git &> /dev/null || sudo apt-get install -qy git &> /dev/null
                else 
                    if command -v yum; then
                        write_tabs $tabs && echo -e "${oreange}yum${green} is installed${white}."
                        write_tabs $tabs && echo -e "Installing ${orange}Git${white} with ${orange}yum${white}..."
                        yum install git &> /dev/null || sudo yum install git &> /dev/null
                    else 
                        if command -v pacman; then
                            write_tabs $tabs && echo -e "${oreange}pacman${green} is installed${white}."
                            write_tabs $tabs && echo -e "Installing ${orange}Git${white} with ${orange}pacman${white}..."
                            pacman -S git &> /dev/null || sudo pacman -S git &> /dev/null
                        fi
                    fi
                fi
            else 
                write_tabs $tabs && echo -e "Your system cannot be determined. There is no reliable way to set up anything on your system. ${red}You are most likely using Windows, which is not supported by any sane person.${white}"
            fi
        fi
    }

    function check_node {
        echo -e "Checking for ${orange}node${white}...\c"
        if command -v node &> /dev/null; then
            echo -e "$green it is present in the system.$white"
        else
            echo -e "$red was not found as a system installation${white}... checking nvm."
            tabs=$((tabs + 1))
            install_node
            tabs=$((tabs - 1))
        fi
    }

    function check_bower {
        echo -e "Checking for ${orange}bower${white}...\c"
        if command -v bower &> /dev/null; then
            echo -e "$green it is present in the system.$white"
        else
            echo -e "$red was not found as a system installation${white}."
            tabs=$((tabs + 1))
            npm install bower -g
            tabs=$((tabs - 1))
        fi
            
    }

    echo
    echo "Checking for dependencies"

    source $(nvm_detect_profile)
    check_node
    check_bower

    echo -e $white
}

                
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
locale-gen en_US.UTF-8
dpkg-reconfigure locales



echo
echo -e "${blue}Setting up your environment and the app.$white"
check_dependencies

if [ -d /vagrant ]; then
    cd /vagrant
fi

if [ -f Makefile ]; then
    make
fi

source $(nvm_detect_profile)





